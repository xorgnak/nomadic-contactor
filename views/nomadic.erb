<% if params.has_key? :wipe %>localStorage.clear();<% end %>

const random = (n) => {
    var r = "";
    while (r.length < n) {
	r+= Math.random().toString(16).substr(2, 1);
    }
    return r;
};
function getFormData(){
    var unindexed_array = $('form').serializeArray();
    var indexed_array = {};
    
    $.map(unindexed_array, function(n, i){
	indexed_array[n['name']] = n['value'];
    });
    
    return indexed_array
}

function msg(c, m) {
    message = new Paho.MQTT.Message(JSON.stringify(m));
    message.destinationName = c;
    client.send(message);
    console.log("msg", c, m)
}

function onConnect() {
    console.log("onConnect");
    //	client.subscribe('#');
    client.subscribe(me);
    var x = {}
	<% Redis.new.publish("M", "#{@me} #{@to}") %>
	msg('<%= @mode %>', { tok: tok, to: '<%= @me.attr["uid"] %>:<%= @now %>' });
    
    s = '';
    s += "<span>powered by <span class='material-icons'>hiking</span>";
    s += " <a style='color: grey;' href='https://github.com/xorgnak/nomadic'>nomadic linux</a> &copy; 2020</span>"
    msg(me, {
	topic: "<span style='background-color: black; color: white; border: thick solid white;' class='material-icons box'>power</span>",
	html: s
    });
    
    s = '';
    s += "<span>running for <a href='https://<%= ENV['DOMAIN'] %>'><%= ENV['DOMAIN'] %></a> &copy; 2020</span>"
    msg(me, {
	topic: "<span style='background-color: black; color: white; border: thick solid white;' class='material-icons box'>power</span>",
	html: s
    });
    
    
    msg(me, {
	topic: "<span class='box material-icons' style='background-color: green; color: white; border: thick solid white;'>directions_run</span>",
	html: "<span><%= Time.now.utc %></span>"
    });

    s = "";
    s += "<ul>";
    s += "<li><span class='material-icons'>military_tech</span><span><%= @me.attr['rank'] %></span></li>";
    s += "<li><span class='material-icons'>call</span><span><%= @me.attr['voicemailbox'] %></span></li>";
    s += "<li><span>name</span><span><%= @me.attr['name'] %></span></li>";
    s += "<li><span>tagline</span><span><%= @me.attr['tagline'] %></span></li>";
    s += "<li><span>venmo</span><span><%= @me.attr['venmo'] %></span></li>";
	s += "<li><span>shield</span><span><%= @me.attr['shield'] %></span></li>";
    s += "<li><span>border</span><span><%= @me.attr['border'] %></span></li>";
    s += "</ul>";
    msg(me, {
	topic: "<span class='box material-icons' style='background-color: black; color: white; border: thick solid white;'>account_box</span>",
	html: s
    });
    s = "";
    s += "<ul>";
    s += "<li><span class='material-icons'>camera</span><span>scan badges</span></li>";
    s += "<li><span class='material-icons'>badge</span><span>your badge</span></li>";
    s += "<li><span class='material-icons'>settings</span><span>update your info</span></li>";
	s += "</ul>";
    msg(me, {
	topic: "<span class='box material-icons' style='background-color: black; color: white; border: thick solid white;'>support</span>",
	html: s
    });
    $(".input").show();
    $("#ready").css('background-color', 'grey');
    $("#ready").hide();
}

function onConnectionLost(responseObject) {
    if (responseObject.errorCode !== 0) {
	console.log("onConnectionLost:"+responseObject.errorMessage); connect();
    }
}

// called when a message arrives
function onMessageArrived(message) {
    var topic = message.destinationName;
    var json = JSON.parse(message.payloadString);
    console.log('json', json);
    var st = "";
    if (json.bg) {
	st += "background-color: " + json.bg + ";";
    } else {
	st += "background-color: black;";
    }
    if (json.fg) {
	st += "color: " + json.fg + ";";
    } else {
	st += "color: white;"; 
    }
    if (json.bd) {
	st += "border: thick solid " + json.bd + ";";
    } else {
	st += "border: thick solid grey;";
    }
    if (json.html) {
	op = json.html
    } else {
	op = json.input
    }
    if (json.to == "<%= @me.attr['uid'] %>") {
	t = "echo";
    } else {
	t = json.to;
    }
    
    chan = "<p class='dm'><span class='to'>" + json.topic + "</button>";
    $('#output').prepend( chan + "<span class='payload'>" + op + '</span></p>');
    console.log("onMessageArrived",  topic, json);
    /*
     *
     * INSERT HANDLING HERE
     *
     */
}

function connect() {
    client.onConnectionLost = onConnectionLost;
    client.onMessageArrived = onMessageArrived;
    client.connect({onSuccess:onConnect
		    <% if request.ssl? %>
		    , useSSL: true,
		    <% end %>
		   });
}
connect();
function onScanSuccess(decodedText, decodedResult) {
    // handle the scanned code as you like, for example:
    $('.input').show();
    $('#ready').hide();
    msg(me, {topic: 'scan', html: decodedResult});
    console.log(`Code matched = ${decodedText}`, decodedResult);
}

function onScanFailure(error) {
    // handle scan failure, usually better to ignore and keep scanning.
    // for example:
    console.warn(`Code scan error = ${error}`);
}

function scan() {
    html5QrcodeScanner.render(onScanSuccess, onScanFailure);
    $('.input').hide();
}

