
<!DOCTYPE html>
<head>
  <meta name="viewport" content="initial-scale=1, maximum-scale=1">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
	rel="stylesheet">
<link rel="manifest" href="https://<%= ENV['DOMAIN'] %>/manifest.webmanifest?<%= request.query_string %>" crossorigin="use-credentials" />

<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.2/mqttws31.js"></script>

<script src="https://cdn.jsdelivr.net/npm/jquery.qrcode@1.0.3/jquery.qrcode.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>
<style>
.btn { border: thick solid black; border-radius: 20px; background-color: orange; color: white; text-decoration: none; }
</style>
<link rel="apple-touch-icon" sizes="57x57" href="/apple-icon-57x57.png">
<link rel="apple-touch-icon" sizes="60x60" href="/apple-icon-60x60.png">
<link rel="apple-touch-icon" sizes="72x72" href="/apple-icon-72x72.png">
<link rel="apple-touch-icon" sizes="76x76" href="/apple-icon-76x76.png">
<link rel="apple-touch-icon" sizes="114x114" href="/apple-icon-114x114.png">
<link rel="apple-touch-icon" sizes="120x120" href="/apple-icon-120x120.png">
<link rel="apple-touch-icon" sizes="144x144" href="/apple-icon-144x144.png">
<link rel="apple-touch-icon" sizes="152x152" href="/apple-icon-152x152.png">
<link rel="apple-touch-icon" sizes="180x180" href="/apple-icon-180x180.png">
<link rel="icon" type="image/png" sizes="192x192"  href="/android-icon-192x192.png">
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png">
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
<meta name="msapplication-TileColor" content="#ffffff">
<meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
<meta name="theme-color" content="#ffffff">
</head>
<body style="width: 100vw; height: 100vh; text-align: center; margin: 0; padding: 0;">
  <%# Redis.new.publish("LAYOUT", "#{params}") %>
  <%= yield %>
  <script>
    <% if params.has_key? :wipe %>localStorage.clear();<% end %>

    <% if params.has_key?(:tok) || params.has_key?(:u) %>
      <% @now = "#{Time.now.utc.to_i}" %>
      <% if params.has_key?(:u) %>
        <% @book = Redis::HashKey.new("uid")[params[:u]] %>
    var cb = "<%= @book %>";
        <% @me = @here.cloud.user(@book) %>
    var tk = "<%= @me.attr['uid'] %>" + "<%= @now %>";
        <% @mode = 'append' %>
      <% else %>
        <% @me = @here.cloud.user(@here.ticket(params[:tok]).active?('token')) %>
    var tk = '<%= params[:tok] %>';
        <% @mode = 'connect' %>
      <% end %>
    var tok = localStorage.getItem('token');
    console.log("TOK:0", tok);
    if ( tok == null || tk != tok) {
	localStorage.setItem('token', tk);
	tok = localStorage.getItem('token');
    }
      console.log("TOK:1", tok);
      
      var files = localStorage.getItem('files');
      console.log("FILES:0", files);
      if ( files == null ) {
      localStorage.setItem('files', JSON.stringify([]));
      files = localStorage.getItem('files');
      }
      console.log("FILES:1", files);
      
      function load() { files = JSON.parse(localStorage.getItem('files')); }
      function save() { localStorage.setItem('files', JSON.stringify(files)); load(); }

      
    if ('serviceWorker' in navigator) {
	// Register a service worker hosted at the root of the
	// site using the default scope.
	navigator.serviceWorker.register('/service.js?tok=<%= params[:tok] %>').then(function(registration) {
	    console.log('Service worker registration succeeded:', registration);
	}, /*catch*/ function(error) {
	    console.log('Service worker registration failed:', error);
	});
    } else {
	console.log('Service workers are not supported.');
    }
    const me = "user/<%= params[:tok] %>";
    let client = new Paho.MQTT.Client('<%= ENV["DOMAIN"] %>', 8083, '<%= params[:tok] %>');
//    let html5QrcodeScanner = new Html5QrcodeScanner( "reader", { fps: 10, qrbox: 250 }, true);

const random = (n) => {
    var r = "";
    while (r.length < n) {
	r+= Math.random().toString(16).substr(2, 1);
    }
    return r;
};
		      
function getFormData(){
    var unindexed_array = $('form').serializeArray();
    var indexed_array = {};
    
    $.map(unindexed_array, function(n, i){
	indexed_array[n['name']] = n['value'];
    });
    
    return indexed_array
}

function msg(c, m) {
    message = new Paho.MQTT.Message(JSON.stringify(m));
    message.destinationName = c;
    client.send(message);
    console.log("msg", c, m)
}

function onConnect() {
    console.log("onConnect");
    //	client.subscribe('#');
    client.subscribe(me);
}

function onConnectionLost(responseObject) {
    if (responseObject.errorCode !== 0) {
	console.log("onConnectionLost:"+responseObject.errorMessage); connect();
    }
}

// called when a message arrives
function onMessageArrived(message) {
    var topic = message.destinationName;
    var json = JSON.parse(message.payloadString);
    console.log('json', json);
    var st = "";
    if (json.bg) {
	st += "background-color: " + json.bg + ";";
    } else {
	st += "background-color: black;";
    }
    if (json.fg) {
	st += "color: " + json.fg + ";";
    } else {
	st += "color: white;"; 
    }
    if (json.bd) {
	st += "border: thick solid " + json.bd + ";";
    } else {
	st += "border: thick solid grey;";
    }
    if (json.html) {
	op = json.html
    } else {
	op = json.input
    }
    if (json.to == "<%= @me.attr['uid'] %>") {
	t = "echo";
    } else {
	t = json.to;
    }
    
    chan = "<p class='dm'><span class='to'>" + json.topic + "</button>";
    $('#output').prepend( chan + "<span class='payload'>" + op + '</span></p>');
    console.log("onMessageArrived",  topic, json);
}

function connect() {
    client.onConnectionLost = onConnectionLost;
    client.onMessageArrived = onMessageArrived;
    client.connect({ onSuccess: onConnect, useSSL: true });
}
//    connect();
    <% end %>
    var scans = {};
    function onScanSuccess(decodedText, decodedResult) {
	if ( scans[decodedText] === false || scans[decodedText] === undefined ) {
	    scans[decodedText] = true;
	    setTimeout(function() { scans[decodedText] = false }, 60000);
	    // handle the scanned code as you like, for example:
	    $('#reader').hide();
	    $('.input').show();
	    $('#ready').hide();
	    msg(me, {topic: 'scan', html: '<h3><a href="' + decodedText + '">valid.</h3>'});
	    console.log(`Code matched = ${decodedText}`, decodedResult);
	}
    }
    
function onScanFailure(error) {
    // handle scan failure, usually better to ignore and keep scanning.
    // for example:
    console.warn(`Code scan error = ${error}`);
}

    function scan() {
    html5QrcodeScanner.render(onScanSuccess, onScanFailure);
    $('.input').hide();






    
}


    
  </script>
</body>
